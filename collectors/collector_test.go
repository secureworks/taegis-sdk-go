// Code generated by gql_clientgen, please do not edit

package collectors

import (
	"context"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/secureworks/tdr-sdk-go/common"
	"github.com/secureworks/tdr-sdk-go/graphql"
	"github.com/secureworks/tdr-sdk-go/testutils"
	"github.com/stretchr/testify/require"
)

var (
	msg      = "test error"
	errors   = []graphql.Error{{Message: msg}}
	errorMsg = fmt.Sprintf("1 error occurred:\n\t* message: %s\n\n", msg)
)

func TestClient(t *testing.T) {
	g := testutils.NewMockGraphQLHandler(t)
	srv := httptest.NewServer(g)
	defer srv.Close()

	tenantID := "123456789"
	headers := http.Header{}
	headers.Set(common.XTenantContextHeader, tenantID)

	g.ExpectedHeaders = headers

	c := New(srv.URL, tenantID)

	g.ExpectedVariables = common.Object{"clusterID": clusterID}
	g.Response = getClusterResponse
	t.Run("GetCluster", func(t *testing.T) {
		getCluster, err := c.GetCluster(clusterID)
		require.Nil(t, err)
		require.Equal(t, getClusterResponse.Out, getCluster)

		g.WithErrors(errors, func() {
			getCluster, err := c.GetCluster(clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getCluster)
		})
	})

	t.Run("GetClusterCtx", func(t *testing.T) {
		ctx := context.Background()
		getCluster, err := c.GetClusterCtx(ctx, clusterID)
		require.Nil(t, err)
		require.Equal(t, getClusterResponse.Out, getCluster)

		g.WithErrors(errors, func() {
			getCluster, err := c.GetClusterCtx(ctx, clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getCluster)
		})
	})

	g.ExpectedVariables = common.Object{"role": role}
	g.Response = getAllClustersResponse
	t.Run("GetAllClusters", func(t *testing.T) {
		getAllClusters, err := c.GetAllClusters(role)
		require.Nil(t, err)
		require.Equal(t, getAllClustersResponse.Out, getAllClusters)

		g.WithErrors(errors, func() {
			getAllClusters, err := c.GetAllClusters(role)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllClusters)
		})
	})

	t.Run("GetAllClustersCtx", func(t *testing.T) {
		ctx := context.Background()
		getAllClusters, err := c.GetAllClustersCtx(ctx, role)
		require.Nil(t, err)
		require.Equal(t, getAllClustersResponse.Out, getAllClusters)

		g.WithErrors(errors, func() {
			getAllClusters, err := c.GetAllClustersCtx(ctx, role)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllClusters)
		})
	})

	g.ExpectedVariables = common.Object{"clusterID": clusterID}
	g.Response = getClusterConfigResponse
	t.Run("GetClusterConfig", func(t *testing.T) {
		getClusterConfig, err := c.GetClusterConfig(clusterID)
		require.Nil(t, err)
		require.Equal(t, getClusterConfigResponse.Out, getClusterConfig)

		g.WithErrors(errors, func() {
			getClusterConfig, err := c.GetClusterConfig(clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterConfig)
		})
	})

	t.Run("GetClusterConfigCtx", func(t *testing.T) {
		ctx := context.Background()
		getClusterConfig, err := c.GetClusterConfigCtx(ctx, clusterID)
		require.Nil(t, err)
		require.Equal(t, getClusterConfigResponse.Out, getClusterConfig)

		g.WithErrors(errors, func() {
			getClusterConfig, err := c.GetClusterConfigCtx(ctx, clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterConfig)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":     clusterID,
		"imageType":     string(imageType),
		"launchConsole": *launchConsole,
		"awsDetails":    testutils.ToGenericMap(*awsDetails),
	}
	g.Response = getClusterImageResponse
	t.Run("GetClusterImage", func(t *testing.T) {
		getClusterImage, err := c.GetClusterImage(clusterImageArgs)
		require.Nil(t, err)
		require.Equal(t, getClusterImageResponse.Out, getClusterImage)

		g.WithErrors(errors, func() {
			getClusterImage, err := c.GetClusterImage(clusterImageArgs)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterImage)
		})
	})

	t.Run("GetClusterImageCtx", func(t *testing.T) {
		ctx := context.Background()
		getClusterImage, err := c.GetClusterImageCtx(ctx, clusterImageArgs)
		require.Nil(t, err)
		require.Equal(t, getClusterImageResponse.Out, getClusterImage)

		g.WithErrors(errors, func() {
			getClusterImage, err := c.GetClusterImageCtx(ctx, clusterImageArgs)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterImage)
		})
	})

	g.ExpectedVariables = common.Object{"clusterID": clusterID}
	g.Response = getClusterCredentialsResponse
	t.Run("GetClusterCredentials", func(t *testing.T) {
		getClusterCredentials, err := c.GetClusterCredentials(clusterID)
		require.Nil(t, err)
		require.Equal(t, getClusterCredentialsResponse.Out, getClusterCredentials)

		g.WithErrors(errors, func() {
			getClusterCredentials, err := c.GetClusterCredentials(clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterCredentials)
		})
	})

	t.Run("GetClusterCredentialsCtx", func(t *testing.T) {
		ctx := context.Background()
		getClusterCredentials, err := c.GetClusterCredentialsCtx(ctx, clusterID)
		require.Nil(t, err)
		require.Equal(t, getClusterCredentialsResponse.Out, getClusterCredentials)

		g.WithErrors(errors, func() {
			getClusterCredentials, err := c.GetClusterCredentialsCtx(ctx, clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterCredentials)
		})
	})

	g.ExpectedVariables = common.Object{"clusterID": clusterID}
	g.Response = getHostsResponse
	t.Run("GetHosts", func(t *testing.T) {
		getHosts, err := c.GetHosts(clusterID)
		require.Nil(t, err)
		require.Equal(t, getHostsResponse.Out, getHosts)

		g.WithErrors(errors, func() {
			getHosts, err := c.GetHosts(clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getHosts)
		})
	})

	t.Run("GetHostsCtx", func(t *testing.T) {
		ctx := context.Background()
		getHosts, err := c.GetHostsCtx(ctx, clusterID)
		require.Nil(t, err)
		require.Equal(t, getHostsResponse.Out, getHosts)

		g.WithErrors(errors, func() {
			getHosts, err := c.GetHostsCtx(ctx, clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getHosts)
		})
	})

	g.ExpectedVariables = common.Object{"clusterID": clusterID}
	g.Response = getOSConfigResponse
	t.Run("GetOSConfig", func(t *testing.T) {
		getOSConfig, err := c.GetOSConfig(clusterID)
		require.Nil(t, err)
		require.Equal(t, getOSConfigResponse.Out, getOSConfig)

		g.WithErrors(errors, func() {
			getOSConfig, err := c.GetOSConfig(clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getOSConfig)
		})
	})

	t.Run("GetOSConfigCtx", func(t *testing.T) {
		ctx := context.Background()
		getOSConfig, err := c.GetOSConfigCtx(ctx, clusterID)
		require.Nil(t, err)
		require.Equal(t, getOSConfigResponse.Out, getOSConfig)

		g.WithErrors(errors, func() {
			getOSConfig, err := c.GetOSConfigCtx(ctx, clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getOSConfig)
		})
	})

	g.ExpectedVariables = common.Object{"clusterID": clusterID}
	g.Response = getClusterStatusesResponse
	t.Run("GetClusterStatuses", func(t *testing.T) {
		getClusterStatuses, err := c.GetClusterStatuses(clusterID)
		require.Nil(t, err)
		require.Equal(t, getClusterStatusesResponse.Out, getClusterStatuses)

		g.WithErrors(errors, func() {
			getClusterStatuses, err := c.GetClusterStatuses(clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterStatuses)
		})
	})

	t.Run("GetClusterStatusesCtx", func(t *testing.T) {
		ctx := context.Background()
		getClusterStatuses, err := c.GetClusterStatusesCtx(ctx, clusterID)
		require.Nil(t, err)
		require.Equal(t, getClusterStatusesResponse.Out, getClusterStatuses)

		g.WithErrors(errors, func() {
			getClusterStatuses, err := c.GetClusterStatusesCtx(ctx, clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterStatuses)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":    clusterID,
		"deploymentID": deploymentID,
	}
	g.Response = getClusterDeploymentStatusResponse
	t.Run("GetClusterDeploymentStatus", func(t *testing.T) {
		getClusterDeploymentStatus, err := c.GetClusterDeploymentStatus(clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, getClusterDeploymentStatusResponse.Out, getClusterDeploymentStatus)

		g.WithErrors(errors, func() {
			getClusterDeploymentStatus, err := c.GetClusterDeploymentStatus(clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterDeploymentStatus)
		})
	})

	t.Run("GetClusterDeploymentStatusCtx", func(t *testing.T) {
		ctx := context.Background()
		getClusterDeploymentStatus, err := c.GetClusterDeploymentStatusCtx(ctx, clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, getClusterDeploymentStatusResponse.Out, getClusterDeploymentStatus)

		g.WithErrors(errors, func() {
			getClusterDeploymentStatus, err := c.GetClusterDeploymentStatusCtx(ctx, clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterDeploymentStatus)
		})
	})

	g.ExpectedVariables = common.Object{"chartName": chartName}
	g.Response = getChartResponse
	t.Run("GetChart", func(t *testing.T) {
		getChart, err := c.GetChart(chartName)
		require.Nil(t, err)
		require.Equal(t, getChartResponse.Out, getChart)

		g.WithErrors(errors, func() {
			getChart, err := c.GetChart(chartName)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getChart)
		})
	})

	t.Run("GetChartCtx", func(t *testing.T) {
		ctx := context.Background()
		getChart, err := c.GetChartCtx(ctx, chartName)
		require.Nil(t, err)
		require.Equal(t, getChartResponse.Out, getChart)

		g.WithErrors(errors, func() {
			getChart, err := c.GetChartCtx(ctx, chartName)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getChart)
		})
	})

	g.ExpectedVariables = common.Object{}
	g.Response = getAllChartsResponse
	t.Run("GetAllCharts", func(t *testing.T) {
		getAllCharts, err := c.GetAllCharts()
		require.Nil(t, err)
		require.Equal(t, getAllChartsResponse.Out, getAllCharts)

		g.WithErrors(errors, func() {
			getAllCharts, err := c.GetAllCharts()
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllCharts)
		})
	})

	t.Run("GetAllChartsCtx", func(t *testing.T) {
		ctx := context.Background()
		getAllCharts, err := c.GetAllChartsCtx(ctx)
		require.Nil(t, err)
		require.Equal(t, getAllChartsResponse.Out, getAllCharts)

		g.WithErrors(errors, func() {
			getAllCharts, err := c.GetAllChartsCtx(ctx)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllCharts)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":    clusterID,
		"deploymentID": deploymentID,
	}
	g.Response = getClusterDeploymentResponse
	t.Run("GetClusterDeployment", func(t *testing.T) {
		getClusterDeployment, err := c.GetClusterDeployment(clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, getClusterDeploymentResponse.Out, getClusterDeployment)

		g.WithErrors(errors, func() {
			getClusterDeployment, err := c.GetClusterDeployment(clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterDeployment)
		})
	})

	t.Run("GetClusterDeploymentCtx", func(t *testing.T) {
		ctx := context.Background()
		getClusterDeployment, err := c.GetClusterDeploymentCtx(ctx, clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, getClusterDeploymentResponse.Out, getClusterDeployment)

		g.WithErrors(errors, func() {
			getClusterDeployment, err := c.GetClusterDeploymentCtx(ctx, clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getClusterDeployment)
		})
	})

	g.ExpectedVariables = common.Object{"clusterID": clusterID}
	g.Response = getAllClusterDeploymentsResponse
	t.Run("GetAllClusterDeployments", func(t *testing.T) {
		getAllClusterDeployments, err := c.GetAllClusterDeployments(clusterID)
		require.Nil(t, err)
		require.Equal(t, getAllClusterDeploymentsResponse.Out, getAllClusterDeployments)

		g.WithErrors(errors, func() {
			getAllClusterDeployments, err := c.GetAllClusterDeployments(clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllClusterDeployments)
		})
	})

	t.Run("GetAllClusterDeploymentsCtx", func(t *testing.T) {
		ctx := context.Background()
		getAllClusterDeployments, err := c.GetAllClusterDeploymentsCtx(ctx, clusterID)
		require.Nil(t, err)
		require.Equal(t, getAllClusterDeploymentsResponse.Out, getAllClusterDeployments)

		g.WithErrors(errors, func() {
			getAllClusterDeployments, err := c.GetAllClusterDeploymentsCtx(ctx, clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllClusterDeployments)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":    clusterID,
		"deploymentID": deploymentID,
		"endpointID":   endpointID,
	}
	g.Response = getDeploymentEndpointResponse
	t.Run("GetDeploymentEndpoint", func(t *testing.T) {
		getDeploymentEndpoint, err := c.GetDeploymentEndpoint(clusterID, deploymentID, endpointID)
		require.Nil(t, err)
		require.Equal(t, getDeploymentEndpointResponse.Out, getDeploymentEndpoint)

		g.WithErrors(errors, func() {
			getDeploymentEndpoint, err := c.GetDeploymentEndpoint(clusterID, deploymentID, endpointID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getDeploymentEndpoint)
		})
	})

	t.Run("GetDeploymentEndpointCtx", func(t *testing.T) {
		ctx := context.Background()
		getDeploymentEndpoint, err := c.GetDeploymentEndpointCtx(ctx, clusterID, deploymentID, endpointID)
		require.Nil(t, err)
		require.Equal(t, getDeploymentEndpointResponse.Out, getDeploymentEndpoint)

		g.WithErrors(errors, func() {
			getDeploymentEndpoint, err := c.GetDeploymentEndpointCtx(ctx, clusterID, deploymentID, endpointID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getDeploymentEndpoint)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":    clusterID,
		"deploymentID": deploymentID,
	}
	g.Response = getAllDeploymentEndpointsResponse
	t.Run("GetAllDeploymentEndpoints", func(t *testing.T) {
		getAllDeploymentEndpoints, err := c.GetAllDeploymentEndpoints(clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, getAllDeploymentEndpointsResponse.Out, getAllDeploymentEndpoints)

		g.WithErrors(errors, func() {
			getAllDeploymentEndpoints, err := c.GetAllDeploymentEndpoints(clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllDeploymentEndpoints)
		})
	})

	t.Run("GetAllDeploymentEndpointsCtx", func(t *testing.T) {
		ctx := context.Background()
		getAllDeploymentEndpoints, err := c.GetAllDeploymentEndpointsCtx(ctx, clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, getAllDeploymentEndpointsResponse.Out, getAllDeploymentEndpoints)

		g.WithErrors(errors, func() {
			getAllDeploymentEndpoints, err := c.GetAllDeploymentEndpointsCtx(ctx, clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllDeploymentEndpoints)
		})
	})

	g.ExpectedVariables = common.Object{}
	g.Response = getAWSRegionsResponse
	t.Run("GetAWSRegions", func(t *testing.T) {
		getAWSRegions, err := c.GetAWSRegions()
		require.Nil(t, err)
		require.Equal(t, getAWSRegionsResponse.Out, getAWSRegions)

		g.WithErrors(errors, func() {
			getAWSRegions, err := c.GetAWSRegions()
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAWSRegions)
		})
	})

	t.Run("GetAWSRegionsCtx", func(t *testing.T) {
		ctx := context.Background()
		getAWSRegions, err := c.GetAWSRegionsCtx(ctx)
		require.Nil(t, err)
		require.Equal(t, getAWSRegionsResponse.Out, getAWSRegions)

		g.WithErrors(errors, func() {
			getAWSRegions, err := c.GetAWSRegionsCtx(ctx)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAWSRegions)
		})
	})

	g.ExpectedVariables = common.Object{"role": role}
	g.Response = getRoleDeploymentsResponse
	t.Run("GetRoleDeployments", func(t *testing.T) {
		getRoleDeployments, err := c.GetRoleDeployments(role)
		require.Nil(t, err)
		require.Equal(t, getRoleDeploymentsResponse.Out, getRoleDeployments)

		g.WithErrors(errors, func() {
			getRoleDeployments, err := c.GetRoleDeployments(role)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getRoleDeployments)
		})
	})

	t.Run("GetRoleDeploymentsCtx", func(t *testing.T) {
		ctx := context.Background()
		getRoleDeployments, err := c.GetRoleDeploymentsCtx(ctx, role)
		require.Nil(t, err)
		require.Equal(t, getRoleDeploymentsResponse.Out, getRoleDeployments)

		g.WithErrors(errors, func() {
			getRoleDeployments, err := c.GetRoleDeploymentsCtx(ctx, role)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getRoleDeployments)
		})
	})

	g.ExpectedVariables = common.Object{"deploymentID": deploymentID}
	g.Response = getRoleDeploymentResponse
	t.Run("GetRoleDeployment", func(t *testing.T) {
		getRoleDeployment, err := c.GetRoleDeployment(deploymentID)
		require.Nil(t, err)
		require.Equal(t, getRoleDeploymentResponse.Out, getRoleDeployment)

		g.WithErrors(errors, func() {
			getRoleDeployment, err := c.GetRoleDeployment(deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getRoleDeployment)
		})
	})

	t.Run("GetRoleDeploymentCtx", func(t *testing.T) {
		ctx := context.Background()
		getRoleDeployment, err := c.GetRoleDeploymentCtx(ctx, deploymentID)
		require.Nil(t, err)
		require.Equal(t, getRoleDeploymentResponse.Out, getRoleDeployment)

		g.WithErrors(errors, func() {
			getRoleDeployment, err := c.GetRoleDeploymentCtx(ctx, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getRoleDeployment)
		})
	})

	g.ExpectedVariables = common.Object{
		"role":      role,
		"timeRange": string(timeRange),
	}
	g.Response = getAllCollectorsOverviewResponse
	t.Run("GetAllCollectorsOverview", func(t *testing.T) {
		getAllCollectorsOverview, err := c.GetAllCollectorsOverview(role, timeRange)
		require.Nil(t, err)
		require.Equal(t, getAllCollectorsOverviewResponse.Out, getAllCollectorsOverview)

		g.WithErrors(errors, func() {
			getAllCollectorsOverview, err := c.GetAllCollectorsOverview(role, timeRange)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllCollectorsOverview)
		})
	})

	t.Run("GetAllCollectorsOverviewCtx", func(t *testing.T) {
		ctx := context.Background()
		getAllCollectorsOverview, err := c.GetAllCollectorsOverviewCtx(ctx, role, timeRange)
		require.Nil(t, err)
		require.Equal(t, getAllCollectorsOverviewResponse.Out, getAllCollectorsOverview)

		g.WithErrors(errors, func() {
			getAllCollectorsOverview, err := c.GetAllCollectorsOverviewCtx(ctx, role, timeRange)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAllCollectorsOverview)
		})
	})

	g.ExpectedVariables = common.Object{"timeRange": string(timeRange)}
	g.Response = getCollectorMetricsResponse
	t.Run("GetCollectorMetrics", func(t *testing.T) {
		getCollectorMetrics, err := c.GetCollectorMetrics(timeRange)
		require.Nil(t, err)
		require.Equal(t, getCollectorMetricsResponse.Out, getCollectorMetrics)

		g.WithErrors(errors, func() {
			getCollectorMetrics, err := c.GetCollectorMetrics(timeRange)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getCollectorMetrics)
		})
	})

	t.Run("GetCollectorMetricsCtx", func(t *testing.T) {
		ctx := context.Background()
		getCollectorMetrics, err := c.GetCollectorMetricsCtx(ctx, timeRange)
		require.Nil(t, err)
		require.Equal(t, getCollectorMetricsResponse.Out, getCollectorMetrics)

		g.WithErrors(errors, func() {
			getCollectorMetrics, err := c.GetCollectorMetricsCtx(ctx, timeRange)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getCollectorMetrics)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID": clusterID,
		"timeRange": string(timeRange),
	}
	g.Response = getAggregateRateByCollectorResponse
	t.Run("GetAggregateRateByCollector", func(t *testing.T) {
		getAggregateRateByCollector, err := c.GetAggregateRateByCollector(clusterID, timeRange)
		require.Nil(t, err)
		require.Equal(t, getAggregateRateByCollectorResponse.Out, getAggregateRateByCollector)

		g.WithErrors(errors, func() {
			getAggregateRateByCollector, err := c.GetAggregateRateByCollector(clusterID, timeRange)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAggregateRateByCollector)
		})
	})

	t.Run("GetAggregateRateByCollectorCtx", func(t *testing.T) {
		ctx := context.Background()
		getAggregateRateByCollector, err := c.GetAggregateRateByCollectorCtx(ctx, clusterID, timeRange)
		require.Nil(t, err)
		require.Equal(t, getAggregateRateByCollectorResponse.Out, getAggregateRateByCollector)

		g.WithErrors(errors, func() {
			getAggregateRateByCollector, err := c.GetAggregateRateByCollectorCtx(ctx, clusterID, timeRange)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getAggregateRateByCollector)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID": clusterID,
		"timeRange": string(timeRange),
	}
	g.Response = getFlowRateResponse
	t.Run("GetFlowRate", func(t *testing.T) {
		getFlowRate, err := c.GetFlowRate(clusterID, timeRange)
		require.Nil(t, err)
		require.Equal(t, getFlowRateResponse.Out, getFlowRate)

		g.WithErrors(errors, func() {
			getFlowRate, err := c.GetFlowRate(clusterID, timeRange)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getFlowRate)
		})
	})

	t.Run("GetFlowRateCtx", func(t *testing.T) {
		ctx := context.Background()
		getFlowRate, err := c.GetFlowRateCtx(ctx, clusterID, timeRange)
		require.Nil(t, err)
		require.Equal(t, getFlowRateResponse.Out, getFlowRate)

		g.WithErrors(errors, func() {
			getFlowRate, err := c.GetFlowRateCtx(ctx, clusterID, timeRange)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getFlowRate)
		})
	})

	g.ExpectedVariables = common.Object{"clusterID": *clusterID2}
	g.Response = getLogLastSeenMetricsResponse
	t.Run("GetLogLastSeenMetrics", func(t *testing.T) {
		getLogLastSeenMetrics, err := c.GetLogLastSeenMetrics(clusterID2)
		require.Nil(t, err)
		require.Equal(t, getLogLastSeenMetricsResponse.Out, getLogLastSeenMetrics)

		g.WithErrors(errors, func() {
			getLogLastSeenMetrics, err := c.GetLogLastSeenMetrics(clusterID2)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getLogLastSeenMetrics)
		})
	})

	t.Run("GetLogLastSeenMetricsCtx", func(t *testing.T) {
		ctx := context.Background()
		getLogLastSeenMetrics, err := c.GetLogLastSeenMetricsCtx(ctx, clusterID2)
		require.Nil(t, err)
		require.Equal(t, getLogLastSeenMetricsResponse.Out, getLogLastSeenMetrics)

		g.WithErrors(errors, func() {
			getLogLastSeenMetrics, err := c.GetLogLastSeenMetricsCtx(ctx, clusterID2)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, getLogLastSeenMetrics)
		})
	})

	g.ExpectedVariables = common.Object{"clusterInput": testutils.ToGenericMap(clusterInput)}
	g.Response = createClusterResponse
	t.Run("CreateCluster", func(t *testing.T) {
		createCluster, err := c.CreateCluster(clusterInput)
		require.Nil(t, err)
		require.Equal(t, createClusterResponse.Out, createCluster)

		g.WithErrors(errors, func() {
			createCluster, err := c.CreateCluster(clusterInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createCluster)
		})
	})

	t.Run("CreateClusterCtx", func(t *testing.T) {
		ctx := context.Background()
		createCluster, err := c.CreateClusterCtx(ctx, clusterInput)
		require.Nil(t, err)
		require.Equal(t, createClusterResponse.Out, createCluster)

		g.WithErrors(errors, func() {
			createCluster, err := c.CreateClusterCtx(ctx, clusterInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createCluster)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":    clusterID,
		"clusterInput": testutils.ToGenericMap(clusterInput),
	}
	g.Response = updateClusterResponse
	t.Run("UpdateCluster", func(t *testing.T) {
		updateCluster, err := c.UpdateCluster(clusterID, clusterInput)
		require.Nil(t, err)
		require.Equal(t, updateClusterResponse.Out, updateCluster)

		g.WithErrors(errors, func() {
			updateCluster, err := c.UpdateCluster(clusterID, clusterInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateCluster)
		})
	})

	t.Run("UpdateClusterCtx", func(t *testing.T) {
		ctx := context.Background()
		updateCluster, err := c.UpdateClusterCtx(ctx, clusterID, clusterInput)
		require.Nil(t, err)
		require.Equal(t, updateClusterResponse.Out, updateCluster)

		g.WithErrors(errors, func() {
			updateCluster, err := c.UpdateClusterCtx(ctx, clusterID, clusterInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateCluster)
		})
	})

	g.ExpectedVariables = common.Object{"clusterID": clusterID}
	g.Response = deleteClusterResponse
	t.Run("DeleteCluster", func(t *testing.T) {
		deleteCluster, err := c.DeleteCluster(clusterID)
		require.Nil(t, err)
		require.Equal(t, deleteClusterResponse.Out, deleteCluster)

		g.WithErrors(errors, func() {
			deleteCluster, err := c.DeleteCluster(clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteCluster)
		})
	})

	t.Run("DeleteClusterCtx", func(t *testing.T) {
		ctx := context.Background()
		deleteCluster, err := c.DeleteClusterCtx(ctx, clusterID)
		require.Nil(t, err)
		require.Equal(t, deleteClusterResponse.Out, deleteCluster)

		g.WithErrors(errors, func() {
			deleteCluster, err := c.DeleteClusterCtx(ctx, clusterID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteCluster)
		})
	})

	g.ExpectedVariables = common.Object{"input": testutils.ToGenericMap(input)}
	g.Response = createOSConfigResponse
	t.Run("CreateOSConfig", func(t *testing.T) {
		createOSConfig, err := c.CreateOSConfig(input)
		require.Nil(t, err)
		require.Equal(t, createOSConfigResponse.Out, createOSConfig)

		g.WithErrors(errors, func() {
			createOSConfig, err := c.CreateOSConfig(input)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createOSConfig)
		})
	})

	t.Run("CreateOSConfigCtx", func(t *testing.T) {
		ctx := context.Background()
		createOSConfig, err := c.CreateOSConfigCtx(ctx, input)
		require.Nil(t, err)
		require.Equal(t, createOSConfigResponse.Out, createOSConfig)

		g.WithErrors(errors, func() {
			createOSConfig, err := c.CreateOSConfigCtx(ctx, input)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createOSConfig)
		})
	})

	g.ExpectedVariables = common.Object{"input": testutils.ToGenericMap(input)}
	g.Response = updateOSConfigResponse
	t.Run("UpdateOSConfig", func(t *testing.T) {
		updateOSConfig, err := c.UpdateOSConfig(input)
		require.Nil(t, err)
		require.Equal(t, updateOSConfigResponse.Out, updateOSConfig)

		g.WithErrors(errors, func() {
			updateOSConfig, err := c.UpdateOSConfig(input)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateOSConfig)
		})
	})

	t.Run("UpdateOSConfigCtx", func(t *testing.T) {
		ctx := context.Background()
		updateOSConfig, err := c.UpdateOSConfigCtx(ctx, input)
		require.Nil(t, err)
		require.Equal(t, updateOSConfigResponse.Out, updateOSConfig)

		g.WithErrors(errors, func() {
			updateOSConfig, err := c.UpdateOSConfigCtx(ctx, input)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateOSConfig)
		})
	})

	g.ExpectedVariables = common.Object{"clusterID": clusterID}
	g.Response = deleteOSConfigResponse
	t.Run("DeleteOSConfig", func(t *testing.T) {
		deleteOSConfig, err := c.DeleteOSConfig(clusterID)
		require.Nil(t, err)
		require.Equal(t, deleteOSConfigResponse.Out, deleteOSConfig)

		g.WithErrors(errors, func() {
			deleteOSConfig, err := c.DeleteOSConfig(clusterID)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, "", deleteOSConfig)
		})
	})

	t.Run("DeleteOSConfigCtx", func(t *testing.T) {
		ctx := context.Background()
		deleteOSConfig, err := c.DeleteOSConfigCtx(ctx, clusterID)
		require.Nil(t, err)
		require.Equal(t, deleteOSConfigResponse.Out, deleteOSConfig)

		g.WithErrors(errors, func() {
			deleteOSConfig, err := c.DeleteOSConfigCtx(ctx, clusterID)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, "", deleteOSConfig)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID": clusterID,
		"hostInput": testutils.ToGenericMap(hostInput),
	}
	g.Response = addHostResponse
	t.Run("AddHost", func(t *testing.T) {
		addHost, err := c.AddHost(clusterID, hostInput)
		require.Nil(t, err)
		require.Equal(t, addHostResponse.Out, addHost)

		g.WithErrors(errors, func() {
			addHost, err := c.AddHost(clusterID, hostInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, addHost)
		})
	})

	t.Run("AddHostCtx", func(t *testing.T) {
		ctx := context.Background()
		addHost, err := c.AddHostCtx(ctx, clusterID, hostInput)
		require.Nil(t, err)
		require.Equal(t, addHostResponse.Out, addHost)

		g.WithErrors(errors, func() {
			addHost, err := c.AddHostCtx(ctx, clusterID, hostInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, addHost)
		})
	})

	g.ExpectedVariables = common.Object{
		"address":   address,
		"clusterID": clusterID,
	}
	g.Response = deleteHostResponse
	t.Run("DeleteHost", func(t *testing.T) {
		deleteHost, err := c.DeleteHost(clusterID, address)
		require.Nil(t, err)
		require.Equal(t, deleteHostResponse.Out, deleteHost)

		g.WithErrors(errors, func() {
			deleteHost, err := c.DeleteHost(clusterID, address)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteHost)
		})
	})

	t.Run("DeleteHostCtx", func(t *testing.T) {
		ctx := context.Background()
		deleteHost, err := c.DeleteHostCtx(ctx, clusterID, address)
		require.Nil(t, err)
		require.Equal(t, deleteHostResponse.Out, deleteHost)

		g.WithErrors(errors, func() {
			deleteHost, err := c.DeleteHostCtx(ctx, clusterID, address)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteHost)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":   clusterID,
		"statusInput": testutils.ToGenericMap(statusInput),
	}
	g.Response = createClusterStatusResponse
	t.Run("CreateClusterStatus", func(t *testing.T) {
		createClusterStatus, err := c.CreateClusterStatus(clusterID, statusInput)
		require.Nil(t, err)
		require.Equal(t, createClusterStatusResponse.Out, createClusterStatus)

		g.WithErrors(errors, func() {
			createClusterStatus, err := c.CreateClusterStatus(clusterID, statusInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createClusterStatus)
		})
	})

	t.Run("CreateClusterStatusCtx", func(t *testing.T) {
		ctx := context.Background()
		createClusterStatus, err := c.CreateClusterStatusCtx(ctx, clusterID, statusInput)
		require.Nil(t, err)
		require.Equal(t, createClusterStatusResponse.Out, createClusterStatus)

		g.WithErrors(errors, func() {
			createClusterStatus, err := c.CreateClusterStatusCtx(ctx, clusterID, statusInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createClusterStatus)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":   clusterID,
		"statusInput": testutils.ToGenericMap(statusInput),
	}
	g.Response = updateClusterStatusResponse
	t.Run("UpdateClusterStatus", func(t *testing.T) {
		updateClusterStatus, err := c.UpdateClusterStatus(clusterID, statusInput)
		require.Nil(t, err)
		require.Equal(t, updateClusterStatusResponse.Out, updateClusterStatus)

		g.WithErrors(errors, func() {
			updateClusterStatus, err := c.UpdateClusterStatus(clusterID, statusInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateClusterStatus)
		})
	})

	t.Run("UpdateClusterStatusCtx", func(t *testing.T) {
		ctx := context.Background()
		updateClusterStatus, err := c.UpdateClusterStatusCtx(ctx, clusterID, statusInput)
		require.Nil(t, err)
		require.Equal(t, updateClusterStatusResponse.Out, updateClusterStatus)

		g.WithErrors(errors, func() {
			updateClusterStatus, err := c.UpdateClusterStatusCtx(ctx, clusterID, statusInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateClusterStatus)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":    clusterID,
		"deploymentID": deploymentID,
	}
	g.Response = deleteClusterStatusResponse
	t.Run("DeleteClusterStatus", func(t *testing.T) {
		deleteClusterStatus, err := c.DeleteClusterStatus(clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, deleteClusterStatusResponse.Out, deleteClusterStatus)

		g.WithErrors(errors, func() {
			deleteClusterStatus, err := c.DeleteClusterStatus(clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteClusterStatus)
		})
	})

	t.Run("DeleteClusterStatusCtx", func(t *testing.T) {
		ctx := context.Background()
		deleteClusterStatus, err := c.DeleteClusterStatusCtx(ctx, clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, deleteClusterStatusResponse.Out, deleteClusterStatus)

		g.WithErrors(errors, func() {
			deleteClusterStatus, err := c.DeleteClusterStatusCtx(ctx, clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteClusterStatus)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":       clusterID,
		"deploymentInput": testutils.ToGenericMap(deploymentInput),
	}
	g.Response = createClusterDeploymentResponse
	t.Run("CreateClusterDeployment", func(t *testing.T) {
		createClusterDeployment, err := c.CreateClusterDeployment(clusterID, deploymentInput)
		require.Nil(t, err)
		require.Equal(t, createClusterDeploymentResponse.Out, createClusterDeployment)

		g.WithErrors(errors, func() {
			createClusterDeployment, err := c.CreateClusterDeployment(clusterID, deploymentInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createClusterDeployment)
		})
	})

	t.Run("CreateClusterDeploymentCtx", func(t *testing.T) {
		ctx := context.Background()
		createClusterDeployment, err := c.CreateClusterDeploymentCtx(ctx, clusterID, deploymentInput)
		require.Nil(t, err)
		require.Equal(t, createClusterDeploymentResponse.Out, createClusterDeployment)

		g.WithErrors(errors, func() {
			createClusterDeployment, err := c.CreateClusterDeploymentCtx(ctx, clusterID, deploymentInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createClusterDeployment)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":       clusterID,
		"deploymentID":    deploymentID,
		"deploymentInput": testutils.ToGenericMap(deploymentInput),
	}
	g.Response = updateClusterDeploymentResponse
	t.Run("UpdateClusterDeployment", func(t *testing.T) {
		updateClusterDeployment, err := c.UpdateClusterDeployment(clusterID, deploymentID, deploymentInput)
		require.Nil(t, err)
		require.Equal(t, updateClusterDeploymentResponse.Out, updateClusterDeployment)

		g.WithErrors(errors, func() {
			updateClusterDeployment, err := c.UpdateClusterDeployment(clusterID, deploymentID, deploymentInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateClusterDeployment)
		})
	})

	t.Run("UpdateClusterDeploymentCtx", func(t *testing.T) {
		ctx := context.Background()
		updateClusterDeployment, err := c.UpdateClusterDeploymentCtx(ctx, clusterID, deploymentID, deploymentInput)
		require.Nil(t, err)
		require.Equal(t, updateClusterDeploymentResponse.Out, updateClusterDeployment)

		g.WithErrors(errors, func() {
			updateClusterDeployment, err := c.UpdateClusterDeploymentCtx(ctx, clusterID, deploymentID, deploymentInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateClusterDeployment)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":    clusterID,
		"deploymentID": deploymentID,
	}
	g.Response = deleteClusterDeploymentResponse
	t.Run("DeleteClusterDeployment", func(t *testing.T) {
		deleteClusterDeployment, err := c.DeleteClusterDeployment(clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, deleteClusterDeploymentResponse.Out, deleteClusterDeployment)

		g.WithErrors(errors, func() {
			deleteClusterDeployment, err := c.DeleteClusterDeployment(clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteClusterDeployment)
		})
	})

	t.Run("DeleteClusterDeploymentCtx", func(t *testing.T) {
		ctx := context.Background()
		deleteClusterDeployment, err := c.DeleteClusterDeploymentCtx(ctx, clusterID, deploymentID)
		require.Nil(t, err)
		require.Equal(t, deleteClusterDeploymentResponse.Out, deleteClusterDeployment)

		g.WithErrors(errors, func() {
			deleteClusterDeployment, err := c.DeleteClusterDeploymentCtx(ctx, clusterID, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteClusterDeployment)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":     clusterID,
		"deploymentID":  deploymentID,
		"endpointInput": testutils.ToGenericMap(endpointInput),
	}
	g.Response = createEndpointResponse
	t.Run("CreateEndpoint", func(t *testing.T) {
		createEndpoint, err := c.CreateEndpoint(clusterID, deploymentID, endpointInput)
		require.Nil(t, err)
		require.Equal(t, createEndpointResponse.Out, createEndpoint)

		g.WithErrors(errors, func() {
			createEndpoint, err := c.CreateEndpoint(clusterID, deploymentID, endpointInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createEndpoint)
		})
	})

	t.Run("CreateEndpointCtx", func(t *testing.T) {
		ctx := context.Background()
		createEndpoint, err := c.CreateEndpointCtx(ctx, clusterID, deploymentID, endpointInput)
		require.Nil(t, err)
		require.Equal(t, createEndpointResponse.Out, createEndpoint)

		g.WithErrors(errors, func() {
			createEndpoint, err := c.CreateEndpointCtx(ctx, clusterID, deploymentID, endpointInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createEndpoint)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":     clusterID,
		"deploymentID":  deploymentID,
		"endpointID":    endpointID,
		"endpointInput": testutils.ToGenericMap(endpointInput),
	}
	g.Response = updateEndpointResponse
	t.Run("UpdateEndpoint", func(t *testing.T) {
		updateEndpoint, err := c.UpdateEndpoint(updateEndpointArgsInput)
		require.Nil(t, err)
		require.Equal(t, updateEndpointResponse.Out, updateEndpoint)

		g.WithErrors(errors, func() {
			updateEndpoint, err := c.UpdateEndpoint(updateEndpointArgsInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateEndpoint)
		})
	})

	t.Run("UpdateEndpointCtx", func(t *testing.T) {
		ctx := context.Background()
		updateEndpoint, err := c.UpdateEndpointCtx(ctx, updateEndpointArgsInput)
		require.Nil(t, err)
		require.Equal(t, updateEndpointResponse.Out, updateEndpoint)

		g.WithErrors(errors, func() {
			updateEndpoint, err := c.UpdateEndpointCtx(ctx, updateEndpointArgsInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateEndpoint)
		})
	})

	g.ExpectedVariables = common.Object{
		"clusterID":    clusterID,
		"deploymentID": deploymentID,
		"endpointID":   endpointID,
	}
	g.Response = deleteEndpointResponse
	t.Run("DeleteEndpoint", func(t *testing.T) {
		deleteEndpoint, err := c.DeleteEndpoint(clusterID, deploymentID, endpointID)
		require.Nil(t, err)
		require.Equal(t, deleteEndpointResponse.Out, deleteEndpoint)

		g.WithErrors(errors, func() {
			deleteEndpoint, err := c.DeleteEndpoint(clusterID, deploymentID, endpointID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteEndpoint)
		})
	})

	t.Run("DeleteEndpointCtx", func(t *testing.T) {
		ctx := context.Background()
		deleteEndpoint, err := c.DeleteEndpointCtx(ctx, clusterID, deploymentID, endpointID)
		require.Nil(t, err)
		require.Equal(t, deleteEndpointResponse.Out, deleteEndpoint)

		g.WithErrors(errors, func() {
			deleteEndpoint, err := c.DeleteEndpointCtx(ctx, clusterID, deploymentID, endpointID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteEndpoint)
		})
	})

	g.ExpectedVariables = common.Object{
		"deploymentInput": testutils.ToGenericMap(deploymentInput),
		"role":            role,
	}
	g.Response = createRoleDeploymentResponse
	t.Run("CreateRoleDeployment", func(t *testing.T) {
		createRoleDeployment, err := c.CreateRoleDeployment(role, deploymentInput)
		require.Nil(t, err)
		require.Equal(t, createRoleDeploymentResponse.Out, createRoleDeployment)

		g.WithErrors(errors, func() {
			createRoleDeployment, err := c.CreateRoleDeployment(role, deploymentInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createRoleDeployment)
		})
	})

	t.Run("CreateRoleDeploymentCtx", func(t *testing.T) {
		ctx := context.Background()
		createRoleDeployment, err := c.CreateRoleDeploymentCtx(ctx, role, deploymentInput)
		require.Nil(t, err)
		require.Equal(t, createRoleDeploymentResponse.Out, createRoleDeployment)

		g.WithErrors(errors, func() {
			createRoleDeployment, err := c.CreateRoleDeploymentCtx(ctx, role, deploymentInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, createRoleDeployment)
		})
	})

	g.ExpectedVariables = common.Object{
		"deploymentID":    deploymentID,
		"deploymentInput": testutils.ToGenericMap(deploymentInput),
	}
	g.Response = updateRoleDeploymentResponse
	t.Run("UpdateRoleDeployment", func(t *testing.T) {
		updateRoleDeployment, err := c.UpdateRoleDeployment(deploymentID, deploymentInput)
		require.Nil(t, err)
		require.Equal(t, updateRoleDeploymentResponse.Out, updateRoleDeployment)

		g.WithErrors(errors, func() {
			updateRoleDeployment, err := c.UpdateRoleDeployment(deploymentID, deploymentInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateRoleDeployment)
		})
	})

	t.Run("UpdateRoleDeploymentCtx", func(t *testing.T) {
		ctx := context.Background()
		updateRoleDeployment, err := c.UpdateRoleDeploymentCtx(ctx, deploymentID, deploymentInput)
		require.Nil(t, err)
		require.Equal(t, updateRoleDeploymentResponse.Out, updateRoleDeployment)

		g.WithErrors(errors, func() {
			updateRoleDeployment, err := c.UpdateRoleDeploymentCtx(ctx, deploymentID, deploymentInput)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, updateRoleDeployment)
		})
	})

	g.ExpectedVariables = common.Object{"deploymentID": deploymentID}
	g.Response = deleteRoleDeploymentResponse
	t.Run("DeleteRoleDeployment", func(t *testing.T) {
		deleteRoleDeployment, err := c.DeleteRoleDeployment(deploymentID)
		require.Nil(t, err)
		require.Equal(t, deleteRoleDeploymentResponse.Out, deleteRoleDeployment)

		g.WithErrors(errors, func() {
			deleteRoleDeployment, err := c.DeleteRoleDeployment(deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteRoleDeployment)
		})
	})

	t.Run("DeleteRoleDeploymentCtx", func(t *testing.T) {
		ctx := context.Background()
		deleteRoleDeployment, err := c.DeleteRoleDeploymentCtx(ctx, deploymentID)
		require.Nil(t, err)
		require.Equal(t, deleteRoleDeploymentResponse.Out, deleteRoleDeployment)

		g.WithErrors(errors, func() {
			deleteRoleDeployment, err := c.DeleteRoleDeploymentCtx(ctx, deploymentID)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deleteRoleDeployment)
		})
	})
}
