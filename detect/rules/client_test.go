// Code generated by gql_clientgen, please do not edit

package rules

import (
	"context"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/secureworks/taegis-sdk-go/common"
	"github.com/secureworks/taegis-sdk-go/graphql"
	"github.com/secureworks/taegis-sdk-go/testutils"
)

var (
	msg      = "test error"
	errors   = []graphql.Error{{Message: msg}}
	errorMsg = fmt.Sprintf("1 error occurred:\n\t* message: %s\n\n", msg)
)

func TestClient(t *testing.T) {
	g := testutils.NewMockGraphQLHandler(t)
	srv := httptest.NewServer(g)
	defer srv.Close()

	tenantID := "123456789"
	headers := http.Header{}
	headers.Set(common.XTenantContextHeader, tenantID)

	g.ExpectedHeaders = headers

	c := New(srv.URL, tenantID)

	g.ExpectedVariables = common.Object{
		"count":    float64(*count),
		"page":     float64(*page),
		"ruleType": string(*ruleTypePtr),
	}
	g.Response = getRulesResponse
	t.Run("GetRules", func(t *testing.T) {
		rules, err := c.GetRules(page, count, ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getRulesResponse.Out, rules)

		g.WithErrors(errors, func() {
			rules, err := c.GetRules(page, count, ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, rules)
		})
	})

	t.Run("GetRulesCtx", func(t *testing.T) {
		ctx := context.Background()
		rules, err := c.GetRulesCtx(ctx, page, count, ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getRulesResponse.Out, rules)

		g.WithErrors(errors, func() {
			rules, err := c.GetRulesCtx(ctx, page, count, ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, rules)
		})
	})

	g.ExpectedVariables = common.Object{
		"count":    float64(*count),
		"page":     float64(*page),
		"ruleType": string(*ruleTypePtr),
	}
	g.Response = getDeletedRulesResponse
	t.Run("GetDeletedRules", func(t *testing.T) {
		deletedRules, err := c.GetDeletedRules(page, count, ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getDeletedRulesResponse.Out, deletedRules)

		g.WithErrors(errors, func() {
			deletedRules, err := c.GetDeletedRules(page, count, ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deletedRules)
		})
	})

	t.Run("GetDeletedRulesCtx", func(t *testing.T) {
		ctx := context.Background()
		deletedRules, err := c.GetDeletedRulesCtx(ctx, page, count, ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getDeletedRulesResponse.Out, deletedRules)

		g.WithErrors(errors, func() {
			deletedRules, err := c.GetDeletedRulesCtx(ctx, page, count, ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, deletedRules)
		})
	})
	g.ExpectedVariables = common.Object{"ruleType": string(*ruleTypePtr)}
	g.Response = getRulesCountResponse
	t.Run("GetRulesCount", func(t *testing.T) {
		rulesCount, err := c.GetRulesCount(ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getRulesCountResponse.Out, rulesCount)

		g.WithErrors(errors, func() {
			rulesCount, err := c.GetRulesCount(ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, 0, rulesCount)
		})
	})

	t.Run("GetRulesCountCtx", func(t *testing.T) {
		ctx := context.Background()
		rulesCount, err := c.GetRulesCountCtx(ctx, ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getRulesCountResponse.Out, rulesCount)

		g.WithErrors(errors, func() {
			rulesCount, err := c.GetRulesCountCtx(ctx, ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, 0, rulesCount)
		})
	})

	g.ExpectedVariables = common.Object{
		"count":     float64(*count),
		"eventType": string(eventType),
		"page":      float64(*page),
		"ruleType":  string(*ruleTypePtr),
	}
	g.Response = getRulesForEventResponse
	rulesForEventArgs := &GetRulesForEventArguments{
		EventType: eventType,
		Page:      page,
		Count:     count,
		RuleType:  ruleTypePtr,
	}
	t.Run("GetRulesForEvent", func(t *testing.T) {
		rulesForEvent, err := c.GetRulesForEvent(rulesForEventArgs)
		require.Nil(t, err)
		require.Equal(t, getRulesForEventResponse.Out, rulesForEvent)

		g.WithErrors(errors, func() {
			rulesForEvent, err := c.GetRulesForEvent(rulesForEventArgs)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, rulesForEvent)
		})
	})

	t.Run("GetRulesForEventCtx", func(t *testing.T) {
		ctx := context.Background()
		rulesForEvent, err := c.GetRulesForEventCtx(ctx, rulesForEventArgs)
		require.Nil(t, err)
		require.Equal(t, getRulesForEventResponse.Out, rulesForEvent)

		g.WithErrors(errors, func() {
			rulesForEvent, err := c.GetRulesForEventCtx(ctx, rulesForEventArgs)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, rulesForEvent)
		})
	})

	g.ExpectedVariables = common.Object{
		"eventType": string(eventType),
		"ruleType":  string(*ruleTypePtr),
	}
	g.Response = getRulesForEventCountResponse
	t.Run("GetRulesForEventCount", func(t *testing.T) {
		rulesForEventCount, err := c.GetRulesForEventCount(eventType, ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getRulesForEventCountResponse.Out, rulesForEventCount)

		g.WithErrors(errors, func() {
			rulesForEventCount, err := c.GetRulesForEventCount(eventType, ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, 0, rulesForEventCount)
		})
	})

	t.Run("GetRulesForEventCountCtx", func(t *testing.T) {
		ctx := context.Background()
		rulesForEventCount, err := c.GetRulesForEventCountCtx(ctx, eventType, ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getRulesForEventCountResponse.Out, rulesForEventCount)

		g.WithErrors(errors, func() {
			rulesForEventCount, err := c.GetRulesForEventCountCtx(ctx, eventType, ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, 0, rulesForEventCount)
		})
	})

	g.ExpectedVariables = common.Object{"id": id}
	g.Response = getRuleResponse
	t.Run("GetRule", func(t *testing.T) {
		rule, err := c.GetRule(id)
		require.Nil(t, err)
		require.Equal(t, getRuleResponse.Out, rule)

		g.WithErrors(errors, func() {
			rule, err := c.GetRule(id)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, rule)
		})
	})

	t.Run("GetRuleCtx", func(t *testing.T) {
		ctx := context.Background()
		rule, err := c.GetRuleCtx(ctx, id)
		require.Nil(t, err)
		require.Equal(t, getRuleResponse.Out, rule)

		g.WithErrors(errors, func() {
			rule, err := c.GetRuleCtx(ctx, id)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, rule)
		})
	})

	g.ExpectedVariables = common.Object{"eventType": string(eventType)}
	g.Response = getFilterKeysResponse
	t.Run("GetFilterKeys", func(t *testing.T) {
		filterKeys, err := c.GetFilterKeys(eventType)
		require.Nil(t, err)
		require.Equal(t, getFilterKeysResponse.Out, filterKeys)

		g.WithErrors(errors, func() {
			filterKeys, err := c.GetFilterKeys(eventType)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, filterKeys)
		})
	})

	t.Run("GetFilterKeysCtx", func(t *testing.T) {
		ctx := context.Background()
		filterKeys, err := c.GetFilterKeysCtx(ctx, eventType)
		require.Nil(t, err)
		require.Equal(t, getFilterKeysResponse.Out, filterKeys)

		g.WithErrors(errors, func() {
			filterKeys, err := c.GetFilterKeysCtx(ctx, eventType)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, filterKeys)
		})
	})

	g.ExpectedVariables = common.Object{
		"eventType": string(eventType),
		"ruleType":  string(*ruleTypePtr),
		"timestamp": timestampStr,
	}
	g.Response = getChangesSinceResponse
	t.Run("GetChangesSince", func(t *testing.T) {
		changesSince, err := c.GetChangesSince(timestamp, eventTypePtr, ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getChangesSinceResponse.Out, changesSince)

		g.WithErrors(errors, func() {
			changesSince, err := c.GetChangesSince(timestamp, eventTypePtr, ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, changesSince)
		})
	})

	t.Run("GetChangesSinceCtx", func(t *testing.T) {
		ctx := context.Background()
		changesSince, err := c.GetChangesSinceCtx(ctx, timestamp, eventTypePtr, ruleTypePtr)
		require.Nil(t, err)
		require.Equal(t, getChangesSinceResponse.Out, changesSince)

		g.WithErrors(errors, func() {
			changesSince, err := c.GetChangesSinceCtx(ctx, timestamp, eventTypePtr, ruleTypePtr)
			require.EqualError(t, err, errorMsg)
			require.Nil(t, changesSince)
		})
	})

	g.ExpectedVariables = common.Object{
		"filters": genericFilters,
		"input":   testutils.ToGenericMap(ruleInput),
	}
	g.Response = createRuleResponse
	t.Run("CreateRule", func(t *testing.T) {
		createRule, err := c.CreateRule(ruleInput, filters)
		require.Nil(t, err)
		require.Equal(t, createRuleResponse.Out, createRule)

		g.WithErrors(errors, func() {
			createRule, err := c.CreateRule(ruleInput, filters)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, createRule)
		})
	})

	t.Run("CreateRuleCtx", func(t *testing.T) {
		ctx := context.Background()
		createRule, err := c.CreateRuleCtx(ctx, ruleInput, filters)
		require.Nil(t, err)
		require.Equal(t, createRuleResponse.Out, createRule)

		g.WithErrors(errors, func() {
			createRule, err := c.CreateRuleCtx(ctx, ruleInput, filters)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, createRule)
		})
	})

	g.ExpectedVariables = common.Object{
		"filter": testutils.ToGenericMap(filterInput),
		"ruleID": ruleID,
	}
	g.Response = addFilterToRuleResponse
	t.Run("AddFilterToRule", func(t *testing.T) {
		addFilterToRule, err := c.AddFilterToRule(ruleID, filterInput)
		require.Nil(t, err)
		require.Equal(t, addFilterToRuleResponse.Out, addFilterToRule)

		g.WithErrors(errors, func() {
			addFilterToRule, err := c.AddFilterToRule(ruleID, filterInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, RuleFilter{}, addFilterToRule)
		})
	})

	t.Run("AddFilterToRuleCtx", func(t *testing.T) {
		ctx := context.Background()
		addFilterToRule, err := c.AddFilterToRuleCtx(ctx, ruleID, filterInput)
		require.Nil(t, err)
		require.Equal(t, addFilterToRuleResponse.Out, addFilterToRule)

		g.WithErrors(errors, func() {
			addFilterToRule, err := c.AddFilterToRuleCtx(ctx, ruleID, filterInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, RuleFilter{}, addFilterToRule)
		})
	})

	g.ExpectedVariables = common.Object{
		"rule":   testutils.ToGenericMap(ruleInput),
		"ruleID": ruleID,
	}
	g.Response = updateRuleResponse
	t.Run("UpdateRule", func(t *testing.T) {
		updateRule, err := c.UpdateRule(ruleID, ruleInput)
		require.Nil(t, err)
		require.Equal(t, updateRuleResponse.Out, updateRule)

		g.WithErrors(errors, func() {
			updateRule, err := c.UpdateRule(ruleID, ruleInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, updateRule)
		})
	})

	t.Run("UpdateRuleCtx", func(t *testing.T) {
		ctx := context.Background()
		updateRule, err := c.UpdateRuleCtx(ctx, ruleID, ruleInput)
		require.Nil(t, err)
		require.Equal(t, updateRuleResponse.Out, updateRule)

		g.WithErrors(errors, func() {
			updateRule, err := c.UpdateRuleCtx(ctx, ruleID, ruleInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, updateRule)
		})
	})

	g.ExpectedVariables = common.Object{"ruleID": ruleID}
	g.Response = deleteRuleResponse
	t.Run("DeleteRule", func(t *testing.T) {
		deleteRule, err := c.DeleteRule(ruleID)
		require.Nil(t, err)
		require.Equal(t, deleteRuleResponse.Out, deleteRule)

		g.WithErrors(errors, func() {
			deleteRule, err := c.DeleteRule(ruleID)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, deleteRule)
		})
	})

	t.Run("DeleteRuleCtx", func(t *testing.T) {
		ctx := context.Background()
		deleteRule, err := c.DeleteRuleCtx(ctx, ruleID)
		require.Nil(t, err)
		require.Equal(t, deleteRuleResponse.Out, deleteRule)

		g.WithErrors(errors, func() {
			deleteRule, err := c.DeleteRuleCtx(ctx, ruleID)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, deleteRule)
		})
	})

	g.ExpectedVariables = common.Object{
		"filter":   testutils.ToGenericMap(filterInput),
		"filterID": filterID,
	}
	g.Response = updateFilterResponse
	t.Run("UpdateFilter", func(t *testing.T) {
		updateFilter, err := c.UpdateFilter(filterID, filterInput)
		require.Nil(t, err)
		require.Equal(t, updateFilterResponse.Out, updateFilter)

		g.WithErrors(errors, func() {
			updateFilter, err := c.UpdateFilter(filterID, filterInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, RuleFilter{}, updateFilter)
		})
	})

	t.Run("UpdateFilterCtx", func(t *testing.T) {
		ctx := context.Background()
		updateFilter, err := c.UpdateFilterCtx(ctx, filterID, filterInput)
		require.Nil(t, err)
		require.Equal(t, updateFilterResponse.Out, updateFilter)

		g.WithErrors(errors, func() {
			updateFilter, err := c.UpdateFilterCtx(ctx, filterID, filterInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, RuleFilter{}, updateFilter)
		})
	})

	g.ExpectedVariables = common.Object{"filterID": filterID}
	g.Response = deleteFilterResponse
	t.Run("DeleteFilter", func(t *testing.T) {
		deleteFilter, err := c.DeleteFilter(filterID)
		require.Nil(t, err)
		require.Equal(t, deleteFilterResponse.Out, deleteFilter)

		g.WithErrors(errors, func() {
			deleteFilter, err := c.DeleteFilter(filterID)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, RuleFilter{}, deleteFilter)
		})
	})

	t.Run("DeleteFilterCtx", func(t *testing.T) {
		ctx := context.Background()
		deleteFilter, err := c.DeleteFilterCtx(ctx, filterID)
		require.Nil(t, err)
		require.Equal(t, deleteFilterResponse.Out, deleteFilter)

		g.WithErrors(errors, func() {
			deleteFilter, err := c.DeleteFilterCtx(ctx, filterID)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, RuleFilter{}, deleteFilter)
		})
	})

	g.ExpectedVariables = common.Object{
		"input":       testutils.ToGenericMap(ruleInput),
		"redQLFilter": testutils.ToGenericMap(redQLFilterInput),
	}
	g.Response = createRedQLRuleResponse
	t.Run("CreateRedQLRule", func(t *testing.T) {
		createRedQLRule, err := c.CreateRedQLRule(ruleInput, redQLFilterInput)
		require.Nil(t, err)
		require.Equal(t, createRedQLRuleResponse.Out, createRedQLRule)

		g.WithErrors(errors, func() {
			createRedQLRule, err := c.CreateRedQLRule(ruleInput, redQLFilterInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, createRedQLRule)
		})
	})

	t.Run("CreateRedQLRuleCtx", func(t *testing.T) {
		ctx := context.Background()
		createRedQLRule, err := c.CreateRedQLRuleCtx(ctx, ruleInput, redQLFilterInput)
		require.Nil(t, err)
		require.Equal(t, createRedQLRuleResponse.Out, createRedQLRule)

		g.WithErrors(errors, func() {
			createRedQLRule, err := c.CreateRedQLRuleCtx(ctx, ruleInput, redQLFilterInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, createRedQLRule)
		})
	})

	g.ExpectedVariables = common.Object{
		"filterID":    filterID,
		"redQLFilter": testutils.ToGenericMap(redQLFilterInput),
	}
	g.Response = updateRedQLFilterResponse
	t.Run("UpdateRedQLFilter", func(t *testing.T) {
		updateRedQLFilter, err := c.UpdateRedQLFilter(filterID, redQLFilterInput)
		require.Nil(t, err)
		require.Equal(t, updateRedQLFilterResponse.Out, updateRedQLFilter)

		g.WithErrors(errors, func() {
			updateRedQLFilter, err := c.UpdateRedQLFilter(filterID, redQLFilterInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, RuleRedQLFilter{}, updateRedQLFilter)
		})
	})

	t.Run("UpdateRedQLFilterCtx", func(t *testing.T) {
		ctx := context.Background()
		updateRedQLFilter, err := c.UpdateRedQLFilterCtx(ctx, filterID, redQLFilterInput)
		require.Nil(t, err)
		require.Equal(t, updateRedQLFilterResponse.Out, updateRedQLFilter)

		g.WithErrors(errors, func() {
			updateRedQLFilter, err := c.UpdateRedQLFilterCtx(ctx, filterID, redQLFilterInput)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, RuleRedQLFilter{}, updateRedQLFilter)
		})
	})

	g.ExpectedVariables = common.Object{"id": id}
	g.Response = disableRuleResponse
	t.Run("DisableRule", func(t *testing.T) {
		disableRule, err := c.DisableRule(id)
		require.Nil(t, err)
		require.Equal(t, disableRuleResponse.Out, disableRule)

		g.WithErrors(errors, func() {
			disableRule, err := c.DisableRule(id)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, disableRule)
		})
	})

	t.Run("DisableRuleCtx", func(t *testing.T) {
		ctx := context.Background()
		disableRule, err := c.DisableRuleCtx(ctx, id)
		require.Nil(t, err)
		require.Equal(t, disableRuleResponse.Out, disableRule)

		g.WithErrors(errors, func() {
			disableRule, err := c.DisableRuleCtx(ctx, id)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, disableRule)
		})
	})

	g.ExpectedVariables = common.Object{"id": id}
	g.Response = enableRuleResponse
	t.Run("EnableRule", func(t *testing.T) {
		enableRule, err := c.EnableRule(id)
		require.Nil(t, err)
		require.Equal(t, enableRuleResponse.Out, enableRule)

		g.WithErrors(errors, func() {
			enableRule, err := c.EnableRule(id)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, enableRule)
		})
	})

	t.Run("EnableRuleCtx", func(t *testing.T) {
		ctx := context.Background()
		enableRule, err := c.EnableRuleCtx(ctx, id)
		require.Nil(t, err)
		require.Equal(t, enableRuleResponse.Out, enableRule)

		g.WithErrors(errors, func() {
			enableRule, err := c.EnableRuleCtx(ctx, id)
			require.EqualError(t, err, errorMsg)
			require.Equal(t, Rule{}, enableRule)
		})
	})
}
